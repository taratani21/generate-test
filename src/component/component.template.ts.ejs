import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import { Pipe, PipeTransform, Injectable, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, Directive, Input, Output } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { By } from '@angular/platform-browser';
import { Observable, of as observableOf, throwError } from 'rxjs';

<%- importMocks.join('\n') -%>

<%- providerMocks.mocks.join('\n') %>

<% config.directives.forEach(directive => { %>
@Directive({ selector: '[<%- directive -%>]' })
class <%- directive.charAt(0).toUpperCase() + directive.slice(1) -%>Directive {
  @Input() <%- directive -%>;
}
<% }) -%>

<% config.pipes.forEach(pipe => { %>
@Pipe({name: '<%- pipe -%>'})
class <%- pipe.charAt(0).toUpperCase() + pipe.slice(1) -%>Pipe implements PipeTransform {
  transform(value) { return value; }
}
<% }) -%>

describe('<%- className %>', () => {
  let fixture: ComponentFixture<<%- className %>>;
  let component: any;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ FormsModule, ReactiveFormsModule ],
      declarations: [
        <%- className %>,
        <% if(config.pipes.length > 0){ %> <%- config.pipes.map(e => e.charAt(0).toUpperCase() + e.slice(1) + 'Pipe').join(', ') %>,<%} %>
        <% if(config.directives.length > 0){ %> <%- config.directives.map(e => e.charAt(0).toUpperCase() + e.slice(1) + 'Directive').join(', ') %><%} %>
      ],
      schemas: [ CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA ],
      providers: [
        <%- providerMocks.providers.join(',\n        ') %>
      ]
    }).compileComponents();
    fixture = TestBed.createComponent(<%- className %>);
    component = fixture.componentInstance;
  });

  it('should run #constructor()', () => {
    expect(component).toBeTruthy();
  });

  <% for(var key in accessorTests) { %>
  <%- accessorTests[key] -%>
  <% } %>
  
  <% for(var key in functionTests) { %>
  <%- functionTests[key] -%>
  <% } %>
  
});
